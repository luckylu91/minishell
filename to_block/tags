!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/hgallien/Qrsus/minishel/premier_jet/minishell/to_block/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/2402f47/
LIBFT_H	libft.h	/^# define LIBFT_H$/;"	d
content	libft.h	/^	void			*content;$/;"	m	struct:s_list	typeref:typename:void *
dollar	to_block_main.c	/^void	dollar(t_var_toblock *var, char *line, t_list **temp_l, t_list **final_l)$/;"	f	typeref:typename:void
end_while	to_block.h	/^	int end_while;$/;"	m	struct:s_var_toblock	typeref:typename:int
error	to_block.h	/^enum flags {none, error, space, spe, variable};$/;"	e	enum:flags
f	to_block.h	/^	enum flags f;$/;"	m	struct:s_block	typeref:enum:flags
f	to_block.h	/^	enum flags f;$/;"	m	struct:s_var_toblock	typeref:enum:flags
flags	to_block.h	/^enum flags {none, error, space, spe, variable};$/;"	g
ft_lstadd_back	ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **alst, t_list *new)$/;"	f	typeref:typename:void
ft_lstlast	ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f	typeref:typename:t_list *
ft_lstnew	ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f	typeref:typename:t_list *
ft_lstsize	ft_lstsize.c	/^int		ft_lstsize(t_list *lst)$/;"	f	typeref:typename:int
ft_strlen	ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f	typeref:typename:size_t
handle_separator	to_block_main.c	/^void	handle_separator(t_var_toblock *var, char *line, t_list **final_l, t_list **temp_l)$/;"	f	typeref:typename:void
handle_space	to_block_main.c	/^void	handle_space(t_var_toblock *var, t_list **final_l,t_list **temp_l, char *line)$/;"	f	typeref:typename:void
i	to_block.h	/^	int i;$/;"	m	struct:s_var_toblock	typeref:typename:int
in_quote	to_block_main.c	/^void		in_quote(char *line, t_var_toblock *var, t_list **temp_l)$/;"	f	typeref:typename:void
is_separator	to_block_main.c	/^int		is_separator(char *c)$/;"	f	typeref:typename:int
is_separator_for_dollar	to_block_main.c	/^int		is_separator_for_dollar(char *c)$/;"	f	typeref:typename:int
list_to_string	to_block_main.c	/^char 	*list_to_string(t_list *l)$/;"	f	typeref:typename:char *
main	_test_toblock.c	/^int main(int ag, char *av[])$/;"	f	typeref:typename:int
new_block	to_block_main.c	/^t_block		*new_block(char *c, enum flags f)$/;"	f	typeref:typename:t_block *
next	libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list *
none	to_block.h	/^enum flags {none, error, space, spe, variable};$/;"	e	enum:flags
s_block	to_block.h	/^typedef struct		s_block$/;"	s
s_list	libft.h	/^typedef struct		s_list$/;"	s
s_var_toblock	to_block.h	/^typedef struct s_var_toblock$/;"	s
space	to_block.h	/^enum flags {none, error, space, spe, variable};$/;"	e	enum:flags
spe	to_block.h	/^	int spe;$/;"	m	struct:s_var_toblock	typeref:typename:int
spe	to_block.h	/^enum flags {none, error, space, spe, variable};$/;"	e	enum:flags
str	to_block.h	/^	char *str;$/;"	m	struct:s_block	typeref:typename:char *
str_to_list	to_block_main.c	/^void	str_to_list(char *str, t_list **temp_l)$/;"	f	typeref:typename:void
t_block	to_block.h	/^}					t_block;$/;"	t	typeref:struct:s_block
t_list	libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_var_toblock	to_block.h	/^}				t_var_toblock;$/;"	t	typeref:struct:s_var_toblock
temp_to_final	to_block_main.c	/^void	temp_to_final(t_list **final_l, t_list **temp_l, enum flags f)$/;"	f	typeref:typename:void
to_block	to_block_main.c	/^void 	to_block(char *line, t_list **final_l)$/;"	f	typeref:typename:void
variable	to_block.h	/^enum flags {none, error, space, spe, variable};$/;"	e	enum:flags
